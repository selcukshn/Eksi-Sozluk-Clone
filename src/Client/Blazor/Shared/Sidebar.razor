@inject IEntryRequestService entryService;
<aside>
    <div class="color-white500">
        <h1 class="fs-12 d-inline-block me-2">g√ºndem</h1>
        <a href="#"><i class="bi bi-gear-fill fs-07"></i></a>
    </div>

    <ResponseView State="@State">
        <ResponseSuccess>
            <ul class="sidebar-list fs-08">
                @if (sidebarEntries.Any())
                {
                    foreach (var entry in sidebarEntries)
                    {
                        <li class="sidebar-list-item d-block">
                            <a href="/@entry.Url" class="d-flex align-items-center">
                                <p class="w-90 m-0 color-white700 lh-10">@entry.Subject</p>
                                <span class="d-inline-block w-10 color-white500">@entry.CommentCount</span>
                            </a>
                        </li>
                    }
                }
            </ul>
        </ResponseSuccess>
    </ResponseView>
</aside>

@code {
    List<SidebarViewModel> sidebarEntries;
    ApplicationState State = new ApplicationState(ResponseStatus.Waiting);
    protected override async Task OnInitializedAsync()
    {
        var response = await entryService.GetSidebarEntriesAsync(new SidebarEntriesQuery() { Random = true });
        State.SetResponse(response);
        if (response.IsSuccess)
            sidebarEntries = await response.ResultAsync<List<SidebarViewModel>>();
    }
}

