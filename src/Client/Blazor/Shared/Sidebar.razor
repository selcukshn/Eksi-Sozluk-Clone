@inject IEntryRequestService entryService;
<aside class="px-2">
    <div class="color-white500">
        <h1 class="fs-12 d-inline-block me-2">bug√ºn</h1>
    </div>
    <div class="">
        <button @onclick="refreshSidebarEntries" class="btn btn-refresh">yenile
            <i class="bi bi-arrow-clockwise"></i>
        </button>
    </div>

    <ResponseView State="@State">
        <ResponseSuccess>
            @if (sidebarEntries.Any())
            {
                <SidebarEntryList EntryList="@sidebarEntries" />
            }
        </ResponseSuccess>
        <ResponseNotFound>
            <Alert Color="BootstrapColor.Secondary">
                <AlertBody>@State.Message</AlertBody>
            </Alert>
        </ResponseNotFound>
        <ResponseError>
            <p class="text-danger"> @State.Message</p>
        </ResponseError>
    </ResponseView>
</aside>

@code {
    List<SidebarViewModel> sidebarEntries;
    ApplicationState State = new ApplicationState(ResponseStatus.Waiting);
    protected override async Task OnInitializedAsync()
    {
        await getSidebarEntries();
    }
    public async void refreshSidebarEntries()
    {
        await getSidebarEntries();
    }

    public async Task getSidebarEntries()
    {
        var response = await entryService.GetSidebarEntriesAsync(new SidebarEntriesQuery() { Random = true });
        State.SetResponse(response);
        if (response.IsSuccess)
            sidebarEntries = await response.ResultAsync<List<SidebarViewModel>>();
    }
}

