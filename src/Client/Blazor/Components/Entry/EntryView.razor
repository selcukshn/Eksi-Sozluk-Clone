@inject NavigationManager navManager;
@inject IEntryRequestService entryService;
@inject ILocalStorageService storage;

<div class="entry mb-5">
    <div class="entry-header">
        <h1 class="entry-title h5 color-white900 fw-700">
            <a href="/@Url">@Subject</a>
        </h1>
        @if (Page != null)
        {
            <EntryNavigation ShowLeftSide="true" Page="@Page" NextPageEvent="NextPage" PageChangedEvent="ChangePage"
                PreviousPageEvent="PreviousPage" />
        }
    </div>
    <div class="entry-body py-4">
        <p class="fs-10 lh-5 mb-2">
            @Content
        </p>
    </div>
    <div class="entry-footer">
        <EntryFooter IsFavorite="@IsFavorite" Vote="@Vote" CreatedDate="@CreatedDate" Username="@Username"
            AddFavoriteOnClickedEvent="AddFavorite" UpVoteOnClickedEvent="VoteProcess"
            DownVoteOnClickedEvent="VoteProcess" />
        <ResponseView State="@State">
            <ResponseWaiting></ResponseWaiting>
            <ResponseError>
                <p class="text-danger">@State.Message</p>
            </ResponseError>
        </ResponseView>
    </div>
</div>

@code {
    [Parameter] public string? Subject { get; set; }
    [Parameter] public string? Url { get; set; }
    [Parameter] public string? Content { get; set; }
    [Parameter] public Page? Page { get; set; }
    [Parameter] public string? Username { get; set; }
    [Parameter] public DateTime? CreatedDate { get; set; }
    [Parameter] public Guid EntryId { get; set; }
    [Parameter] public VoteType? Vote { get; set; }
    [Parameter] public bool IsFavorite { get; set; }
    [Parameter] public EventCallback AddFavoriteOnClickedEvent { get; set; }
    private ApplicationState State = new ApplicationState(ResponseStatus.Waiting);
    private void ChangePage(ChangeEventArgs eventArgs)
    {
        if (eventArgs.Value != null)
            navManager.NavigateTo($"/{Url}?page={Convert.ToInt32(eventArgs.Value)}");
    }
    private void NextPage()
    {
        navManager.NavigateTo($"/{Url}?page={Page?.Current + 1}");
    }
    private void PreviousPage()
    {
        navManager.NavigateTo($"/{Url}?page={Page?.Current - 1}");
    }
    private async void AddFavorite()
    {
        await entryService.FavoriteAsync(new EntryFavoriteCommand((await storage.GetUserInformationAsync()).UserId, EntryId));
        IsFavorite = !IsFavorite;
        StateHasChanged();
    }
    private async Task VoteProcess(VoteType type)
    {
        if (await storage.HaveUserAsync())
        {
            var user = await storage.GetUserInformationAsync();
            var response = await entryService.VoteAsync(new EntryVoteCommand(type, user.UserId, EntryId));
            State.SetResponse(response);
        }
        VoteChange(type);
    }
    private void VoteChange(VoteType vote)
    {
        if ((Vote == VoteType.Up && vote == VoteType.Up) || (Vote == VoteType.Down && vote == VoteType.Down))
            Vote = VoteType.None;
        else
            Vote = vote;
        StateHasChanged();
    }
}
