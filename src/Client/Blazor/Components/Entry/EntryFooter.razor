@inject ILocalStorageService storage;

<div class="entry-buttons d-flex justify-content-between mb-2">
    <div class="d-flex gap-4 color-white600 fs-09">
        <span class="entry-buttons-up cursor-pointer @(Vote == VoteType.Up ? "selected":"")" title="şükela!"
        @onclick="UpVote">
            <i class="bi bi-arrow-up-square"></i>
        </span>
        <span class="entry-buttons-down cursor-pointer @(Vote == VoteType.Down ? "selected":"")" title="çok kötü"
        @onclick="DownVote">
            <i class="bi bi-arrow-down-square"></i>
        </span>
        <AuthorizeView>
            <Authorized>
                @if (user?.Username != Username)
                {
                    <span class="entry-buttons-favorite cursor-pointer @(IsFavorite ? "selected":"")" title="favorilere ekle"
                    @onclick="AddFavorite"></span>
                }
            </Authorized>
        </AuthorizeView>
    </div>
    <div class="d-flex gap-4 color-white600 fs-09">
        <a href="#" class="entry-share">
            <i class="bi bi-box-arrow-up"> </i>
        </a>
        <a href="#" class="entry-other">
            <i class="bi bi-three-dots"> </i>
        </a>
    </div>
</div>
<div class="entry-user d-flex gap-3 justify-content-end">
    <div class="text-end">
        <a href="#" class="d-block fs-09" style="color: var(--theme-300);">@Username</a>
        <span class="d-block color-white600 fs-07 cursor-pointer">@CreatedDate</span>
    </div>
    <div>
        <a href="#" class="d-inline-block">
            <img src="https://icones.pro/wp-content/uploads/2021/02/icone-utilisateur-gris.png" class="img-fluid"
                width="40">
        </a>
    </div>
</div>

@code {
    [Parameter] public string Username { get; set; }
    [Parameter] public DateTime? CreatedDate { get; set; }
    [Parameter] public VoteType? Vote { get; set; }
    [Parameter] public bool IsFavorite { get; set; }
    [Parameter] public EventCallback AddFavoriteOnClickedEvent { get; set; }
    [Parameter] public EventCallback<VoteType> UpVoteOnClickedEvent { get; set; }
    [Parameter] public EventCallback<VoteType> DownVoteOnClickedEvent { get; set; }
    private LoggedUserInformation? user { get; set; }
    protected override async Task OnInitializedAsync()
    {
        if (await storage.HaveUserAsync())
            user = await storage.GetUserInformationAsync();
    }
    private async void AddFavorite()
    {
        await AddFavoriteOnClickedEvent.InvokeAsync();
    }
    private async void UpVote()
    {
        if (Vote == VoteType.Up)
            await UpVoteOnClickedEvent.InvokeAsync(VoteType.None);
        else
            await UpVoteOnClickedEvent.InvokeAsync(VoteType.Up);
    }
    private async void DownVote()
    {
        if (Vote == VoteType.Down)
            await DownVoteOnClickedEvent.InvokeAsync(VoteType.None);
        else
            await DownVoteOnClickedEvent.InvokeAsync(VoteType.Down);
    }

}