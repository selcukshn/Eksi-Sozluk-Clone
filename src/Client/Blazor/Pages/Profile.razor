@page "/biri/{username?}"
@using Blazored.Toast.Configuration

<BlazoredToasts Timeout="5" ShowProgressBar="true" Position="ToastPosition.BottomRight" SuccessIcon="fa fa-thumbs-up" />
<BlazoredToasts Timeout="5" ShowProgressBar="true" Position="ToastPosition.TopRight" SuccessIcon="fa fa-thumbs-up" />
<section id="profile">
    <ResponseView State="@UserState">
        <ResponseSuccess>
            <ProfileTop Username="@username" IsLoggedUser="IsLoggedUser" />
            <ProfileCounter EntryCount="@User?.EntryCount" Biography="@User?.Biography" />

            <ProfileButtons IsLoggedUser="IsLoggedUser" Biography="@User?.Biography" />

            <ul class="nav nav-tabs profile-selection" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="entry-tab" data-bs-toggle="tab" data-bs-target="#entry-tab-pane"
                        type="button" role="tab" aria-controls="entry-tab-pane" aria-selected="true">entry'ler</button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="favorite-tab" data-bs-toggle="tab" data-bs-target="#favorite-tab-pane"
                        type="button" role="tab" aria-controls="favorite-tab-pane"
                        aria-selected="false">favoriler</button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="images-tab" data-bs-toggle="tab" data-bs-target="#images-tab-pane"
                        type="button" role="tab" aria-controls="images-tab-pane"
                        aria-selected="false">görseller</button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" type="button">istatistikler</button>
                </li>
            </ul>
            <div class="tab-content">
                <div class="tab-pane fade show active" id="entry-tab-pane" role="tabpanel" aria-labelledby="entry-tab"
                    tabindex="0">
                    <ProfileSelectionPane User="@User" LoadDataRequest="GetUserEntries">
                        <NotFound>
                            <div>daha fazla yüklenecek entry yok</div>
                        </NotFound>
                    </ProfileSelectionPane>
                </div>
                <div class="tab-pane fade" id="favorite-tab-pane" role="tabpanel" aria-labelledby="favorite-tab"
                    tabindex="0">
                    <ProfileSelectionPane User="@User" LoadDataRequest="GetUserFavorites">
                        <NotFound>
                            <div>daha fazla favorilere eklenmiş entry yok</div>
                        </NotFound>
                    </ProfileSelectionPane>
                </div>
                <div class="tab-pane fade" id="images-tab-pane" role="tabpanel" aria-labelledby="images-tab"
                    tabindex="0">
                    <ProfileSelectionPane User="@User" LoadDataRequest="GetUserImages">
                        <NotFound>
                            <div>daha fazla yüklenecek entry yok</div>
                        </NotFound>
                    </ProfileSelectionPane>
                </div>
            </div>
        </ResponseSuccess>
        <ResponseNotFound>
            <p>geçerli bir kullanıcı adı girdiğinizden emin olun</p>
        </ResponseNotFound>
    </ResponseView>
</section>

@code {
    [Parameter] public string? username { get; set; }
    [Inject] public IEntryRequestService entryRequestService { get; set; }
    [Inject] public IUserRequestService userRequestService { get; set; }
    [Inject] public AuthenticationStateProvider authenticationStateProvider { get; set; }
    UserViewModel? User;
    Guid? LoggedUserId;
    bool IsLoggedUser;
    ApplicationState UserState = new ApplicationState(ResponseStatus.Waiting);

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(username))
            await InitAsync();
        else
            UserState.Status = ResponseStatus.NotFound;
    }
    private async Task InitAsync()
    {
        LoggedUserId = await authenticationStateProvider.GetUserIdAsync();
        var response = await userRequestService.GetUserAsync(username);
        if (response.IsSuccess)
            User = await response.ResultAsync<UserViewModel>();
        UserState.SetResponse(response);
        IsLoggedUser = User?.Id == LoggedUserId;
    }

    public async Task<RequestResponse> GetUserEntries(Guid userId, int skip) =>
    await entryRequestService.GetUserEntriesAsync(userId, skip);
    public async Task<RequestResponse> GetUserFavorites(Guid userId, int skip) =>
    await entryRequestService.GetUserFavoritesAsync(userId, skip);
    public async Task<RequestResponse> GetUserImages(Guid userId, int skip) =>
    await entryRequestService.GetUserEntriesAsync(userId, skip);

    public enum Selection
    {
        Entries, Favorites, Images
    }
}