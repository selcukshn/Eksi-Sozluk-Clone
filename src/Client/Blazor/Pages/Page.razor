@page "/{url}"
@inject IEntryRequestService entryService;
@inject IEntryCommentRequestService entryCommentsService;
@inject NavigationManager navManager;

<PageTitle>@entry?.Subject - ekşi sözlük</PageTitle>

<ResponseView State="@State">
    <ResponseSuccess>

        <EntryView Page="@entryComments?.Page" Content="@entry?.Content" CreatedDate="@entry?.CreatedDate"
            Subject="@entry?.Subject" Url="@entry?.Url" Username="@entry?.Username" />
        @if (entryComments?.Data != null && entryComments.Data.Any())
        {
            foreach (var comment in entryComments.Data)
            {
                <EntryCommentView Content="@comment.Content" CreatedDate="@comment.CreatedDate" Username="@comment.Username" />
            }
            <EntryNavigation Page="@entryComments.Page" NextPageEvent="NextPage" PageChangedEvent="ChangePage"
                PreviousPageEvent="PreviousPage" />
            <EntryCreate Subject="@entry?.Subject" />
        }
        else
        {
            <Alert Color="BootstrapColor.Light" Class="rounded-0 fs-09">
                <AlertBody>
                    Böyle bir sayfa yok en yakın sayfaya <a class="color-white900 text-decoration-underline"
                        href="/@(url)?page=@(entryComments?.Page.Max)">git</a>
                </AlertBody>
            </Alert>
        }
    </ResponseSuccess>
</ResponseView>
@code {
    [Parameter] public string url { get; set; }
    [Parameter][SupplyParameterFromQuery] public int page { get; set; }
    EntryViewModel? entry;
    PagedViewModel<EntryCommentsViewModel>? entryComments;
    ApplicationState State = new ApplicationState(ResponseStatus.Waiting);
    protected override async Task OnParametersSetAsync()
    {
        State.Status = ResponseStatus.Waiting;
        var entryResponse = await entryService.GetAsync(url);
        State.SetResponse(entryResponse);
        if (entryResponse.IsSuccess)
        {
            entry = await entryResponse.ResultAsync<EntryViewModel>();
            var commentsResponse = await entryCommentsService.GetAsync(entry.Id, new PagedQuery() { Current = page });
            State.SetResponse(commentsResponse);
            if (commentsResponse.IsSuccess)
                entryComments = await commentsResponse.ResultAsync<PagedViewModel<EntryCommentsViewModel>>();
        }
    }
    private void ChangePage(ChangeEventArgs eventArgs)
    {
        if (eventArgs.Value != null)
            navManager.NavigateTo($"/{url}?page={Convert.ToInt32(eventArgs.Value)}");
    }
    private void NextPage()
    {
        navManager.NavigateTo($"/{url}?page={entryComments?.Page.Current + 1}");
    }
    private void PreviousPage()
    {
        navManager.NavigateTo($"/{url}?page={entryComments?.Page.Current - 1}");
    }
    private void GoLastPage()
    {
        navManager.NavigateTo($"/{url}?page={entryComments?.Page.Max}");
    }
}
