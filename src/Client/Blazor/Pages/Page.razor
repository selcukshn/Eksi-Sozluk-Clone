@page "/{url}"
@inject IRequestService requestService;
@inject NavigationManager navManager;

<ResponseView State="@State">
    <ResponseSuccess>
        <EntryComponent Page="@entryComments?.Page" Content="@entry?.Content" CreatedDate="@entry?.CreatedDate"
            Subject="@entry?.Subject" Url="@entry?.Url" Username="@entry?.Username" />
        @if (entryComments?.Data != null)
        {
            foreach (var comment in entryComments.Data)
            {
                <EntryComment Content="@comment.Content" CreatedDate="@comment.CreatedDate" Username="@comment.Username" />
            }
        }
        <div class="d-flex justify-content-end">
            <div class="d-flex align-items-center gap-1 color-white700">
                <select @onchange="ChangePage" class="form-select form-select-sm fs-08 focus-disable">
                    @for (int i = 1; i <= entryComments?.Page.Max; i++)
                    {
                        <option selected="@(i == entryComments.Page.Current)" value="@i">@i</option>
                    }
                </select>
                /
                <button class="btn btn-sm border py-1 px-2 fs-08">@entryComments?.Page.Current</button>
                <button class="btn btn-sm border py-1 px-2 fs-08" @onclick="NextPage">
                    <i class="bi bi-chevron-double-right"></i>
                </button>
            </div>
        </div>
    </ResponseSuccess>
</ResponseView>
@code {
    [Parameter] public string? url { get; set; }
    [Parameter][SupplyParameterFromQuery] public int page { get; set; }
    EntryViewModel? entry;
    PagedViewModel<EntryCommentsViewModel>? entryComments;
    ApplicationState State = new ApplicationState(ResponseStatus.Waiting);
    protected override async Task OnParametersSetAsync()
    {
        State.Status = ResponseStatus.Waiting;
        var entryResponse = await requestService.GetAsync($"/api/entry/{url}");
        State.SetResponse(entryResponse);
        if (entryResponse.IsSuccess)
        {
            entry = await entryResponse.ResultAsync<EntryViewModel>();
            var commentsResponse = await requestService.GetAsync($"/api/entrycomments/{entry?.Id}?current={page}");
            State.SetResponse(commentsResponse);
            if (commentsResponse.IsSuccess)
                entryComments = await commentsResponse.ResultAsync<PagedViewModel<EntryCommentsViewModel>>();
        }
    }
    private void ChangePage(ChangeEventArgs eventArgs)
    {
        if (eventArgs.Value != null)
            navManager.NavigateTo($"/{url}?page={Convert.ToInt32(eventArgs.Value)}");
    }
    private void NextPage()
    {
        navManager.NavigateTo($"/{url}?page={entryComments?.Page.Current + 1}");
    }
}
